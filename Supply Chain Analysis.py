#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

df = pd.read_csv("supply_chain_data.csv")
print(df.head())


# In[2]:


#Revenue generated by each product
revenue_by_product = df.groupby('Product type')['Revenue generated'].sum().reset_index()
pie_chart = px.pie(revenue_by_product, values='Revenue generated', names='Product type', 
                   title='Revenue by Product Type', 
                   hover_data=['Revenue generated'],
                   hole=0.4,
                   color_discrete_sequence=px.colors.qualitative.T10)
                   
pie_chart.update_traces(textposition='inside', textinfo='percent+label')
pie_chart.show()


# In[3]:


fig = px.bar(df, x='Product type', y='Number of products sold', 
             labels={'Number of products sold': 'Sales'},
             title='Sales by Product Type')

fig.show()


# In[4]:


fig = px.scatter(df, x='Price',
                 y='Revenue generated',
                 color='Product type',
                 title='Revenue Generated vs. Price by Product Type',
                 trendline="ols")

fig.show()


# In[5]:


fig = px.bar(df, x='Shipping carriers', y='Revenue generated',
             title='Revenue by Shipping Carrier',
             labels={'Revenue generated': 'Total Revenue'},
             color='Shipping carriers')

fig.show()


# In[6]:


fig = px.bar(df, x='Location', y='Number of products sold', 
             title='Sales by location',
             labels = {'Number of products sold' : 'Sales'},
             color = 'Location')

fig.show()


# In[7]:


sales_by_location_product = df.groupby(['Location', 'Product type'])['Number of products sold'].sum().reset_index()

# Find the product with the highest sales in each location
top_selling_products = sales_by_location_product.groupby('Location')['Number of products sold'].idxmax()

# Extract the rows corresponding to the top-selling products in each location
top_selling_products_data = sales_by_location_product.loc[top_selling_products]

print(top_selling_products_data)


# In[8]:


defect_rate = df.groupby('Product type')['Defect rates'].mean().reset_index()

print(defect_rate)


# In[9]:


transportation_costs = px.pie(df, 
                              values='Costs', 
                              names='Transportation modes', 
                              title='Cost Distribution by Transportation Mode',
                              hole=0.4,
                              color_discrete_sequence=px.colors.qualitative.Pastel)
transportation_costs.show()


# In[10]:


df['Profit'] = df['Revenue generated'] - (df['Manufacturing costs'] + df['Costs'])

# Group the data by 'Product type' and calculate the total profit for each product type
profit_by_product = df.groupby('Product type')['Profit'].sum().reset_index()

print(profit_by_product)


# In[11]:


plt.figure(figsize=(10, 6))
plt.bar(profit_by_product['Product type'], profit_by_product['Profit'])
plt.xlabel('Product Type')
plt.ylabel('Profit')
plt.title('Profit by Product Type')
plt.xticks(rotation=45)
plt.show()


# In[12]:


plt.figure(figsize=(10, 6))
plt.bar(df['Product type'], df['Manufacturing costs'])
plt.xlabel('Product Type')
plt.ylabel('Manufacturing cost')
plt.title('Manufacturing cost by Product Type')
plt.xticks(rotation=45)
plt.show()


# In[13]:


top_15_skus = df.sort_values(by='Revenue generated', ascending=False).head(15)

# Create a scatter plot of SKU vs. Revenue generated for the top 15 SKUs
plt.figure(figsize=(10, 6))
plt.scatter(top_15_skus['SKU'], top_15_skus['Revenue generated'], alpha=0.5)
plt.xlabel('SKU')
plt.ylabel('Revenue generated')
plt.title('Top 15 SKUs by Revenue Generated')
plt.grid(True)
plt.show()

